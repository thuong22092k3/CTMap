import 'package:ctmap/pages/screens/Home_Map/edit_sheet.dart';
import 'package:ctmap/pages/screens/Home_Map/home_map.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:ctmap/data/type.dart';
import 'package:ctmap/state_management/user_state.dart';
import 'package:ctmap/services/api.dart';
import 'package:ctmap/assets/icons/icons.dart';
import 'package:ctmap/assets/colors/colors.dart';
import 'package:latlong2/latlong.dart';
import 'package:share_plus/share_plus.dart';

class DetailSheet extends ConsumerWidget {
  final AccidentData accidentData;

  const DetailSheet({Key? key, required this.accidentData}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final userState = ref.watch(userStateProvider);
    final username = userState.userName;

    return Scaffold(
      body: SingleChildScrollView(
        child: Container(
          padding: const EdgeInsets.all(10),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.zero,
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.3),
                blurRadius: 10,
                offset: Offset(0, 5),
              ),
            ],
          ),
          child: Stack(
            children: [
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Text(
                        'Chi ti·∫øt v·ª• tai n·∫°n',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                          color: AppColors.red,
                        ),
                      ),
                      IconButton(
                        icon: const Icon(AppIcons.close),
                        onPressed: () {
                          Navigator.of(context).pop();
                        },
                      ),
                    ],
                  ),
                  SizedBox(height: 10),
                  _buildInfoRow('Ng√†y',
                      '${accidentData.date.day}/${accidentData.date.month}/${accidentData.date.year}'),
                  SizedBox(height: 10),
                  _buildSeverityRow(accidentData.level),
                  SizedBox(height: 10),
                  _buildInfoRow(
                      'Lo·∫°i tai n·∫°n', '${_displayCause(accidentData.cause)}'),
                  SizedBox(height: 10),
                  _buildInfoRow('S·ªë ph∆∞∆°ng ti·ªán li√™n quan',
                      '${accidentData.sophuongtienlienquan}'),
                  SizedBox(height: 10),
                  _buildInfoRow('S·ªë ng∆∞·ªùi ch·∫øt', '${accidentData.deaths}'),
                  SizedBox(height: 10),
                  _buildInfoRow(
                      'S·ªë ng∆∞·ªùi b·ªã th∆∞∆°ng', '${accidentData.injuries}'),
                  SizedBox(height: 10),
                  _buildInfoRow('ƒê·ªãa ƒëi·ªÉm', '${accidentData.location}'),
                  SizedBox(height: 10),
                  _buildInfoRow('Th√†nh ph·ªë', '${accidentData.city}'),
                  if (accidentData.showUserName &&
                      accidentData.userName != null &&
                      accidentData.userName.isNotEmpty) ...[
                    SizedBox(height: 10),
                    _buildInfoRow('T√™n ng∆∞·ªùi d√πng', accidentData.userName),
                  ],
                  SizedBox(height: 10),
                ],
              ),
              if ((username != null && username.isNotEmpty) &&
                  (username == accidentData.userName ||
                      userState.email == accidentData.userName))
                Positioned(
                  bottom: 10,
                  right: 10,
                  child: Row(
                    children: [
                      IconButton(
                        icon: const Icon(AppIcons.edit, color: AppColors.blue),
                        onPressed: () {
                          showModalBottomSheet(
                            context: context,
                            builder: (context) {
                              return EditSheet(accidentData: accidentData);
                            },
                          );
                        },
                      ),
                      IconButton(
                        icon: const Icon(AppIcons.delete, color: AppColors.red),
                        onPressed: () {
                          _handleDelete(context);
                        },
                      ),
                    ],
                  ),
                ),
              Positioned(
                bottom: 10,
                left: 50,
                child: IconButton(
                  icon: const Icon(AppIcons.share, color: AppColors.blue),
                  onPressed: () {
                    _shareAccidentDetails();
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _handleDelete(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('X√°c nh·∫≠n x√≥a'),
          content: const Text('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a v·ª• tai n·∫°n n√†y?'),
          actions: <Widget>[
            TextButton(
              child: const Text('H·ªßy'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            TextButton(
              child: const Text(
                'X√≥a',
                style: TextStyle(color: AppColors.red),
              ),
              onPressed: () async {
                try {
                  await deleteAccident(accidentData.id);
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                        content: Text('V·ª• tai n·∫°n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng')),
                  );
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => Home()),
                  );
                  //Navigator.of(context).pop();
                } catch (e) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                        content: Text('C√≥ l·ªói x·∫£y ra khi x√≥a v·ª• tai n·∫°n: $e')),
                  );
                }
              },
            ),
          ],
        );
      },
    );
  }

  void _shareAccidentDetails() {
    String mapUrl =
        "//www.google.com/maps/search/?api=1&query=${accidentData.position.latitude},${accidentData.position.longitude}";

    String accidentDetails = '''
    ‚ÄºÔ∏è  V·ª• tai n·∫°n t·∫°i ${accidentData.location} ‚ÄºÔ∏è 
      - Ng√†y: ${accidentData.date.day}/${accidentData.date.month}/${accidentData.date.year}
      - Nguy√™n nh√¢n: ${_displayCause(accidentData.level)}
      - S·ªë ph∆∞∆°ng ti·ªán li√™n quan: ${accidentData.sophuongtienlienquan}
      - S·ªë ng∆∞·ªùi ch·∫øt: ${accidentData.deaths}
      - S·ªë ng∆∞·ªùi b·ªã th∆∞∆°ng: ${accidentData.injuries}
      ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
      üìçƒê·ªãa ƒëi·ªÉm: ${accidentData.location}
      üìåMaps: "$mapUrl"
    ''';
    print(accidentDetails);
    Share.share(accidentDetails, subject: 'Th√¥ng tin v·ª• tai n·∫°n giao th√¥ng');
  }

  Widget _buildInfoRow(String title, String value) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Expanded(
          flex: 1,
          child: Align(
            alignment: Alignment.centerRight,
            child: Text(
              '$title:',
              textAlign: TextAlign.right,
              style: const TextStyle(fontSize: 12),
            ),
          ),
        ),
        const SizedBox(width: 20),
        Expanded(
          flex: 2,
          child: Align(
            alignment: Alignment.centerLeft,
            child: Text(
              value,
              style: const TextStyle(fontSize: 12),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildSeverityRow(int level) {
    return Row(
      children: [
        const Expanded(
          flex: 1,
          child: Align(
            alignment: Alignment.centerRight,
            child: Text(
              "M·ª©c ƒë·ªô:",
              style: TextStyle(fontSize: 12),
            ),
          ),
        ),
        const SizedBox(width: 20),
        Expanded(
          flex: 2,
          child: Row(
            children: [
              for (int i = 1; i <= 5; i++)
                NumberedLocationIcon(
                  iconData: AppIcons.location,
                  number: i,
                  isMatched: i == level,
                ),
            ],
          ),
        ),
      ],
    );
  }

  String _displayCause(int cause) {
    switch (cause) {
      case 1:
        return "R∆∞·ª£u bia/ Ma t√∫y";
      case 2:
        return "Vi ph·∫°m t·ªëc ƒë·ªô, thi·∫øu quan s√°t, v∆∞·ª£t ƒë√®n ƒë·ªè, m·∫•t l√°i‚Ä¶";
      case 3:
        return "Ph∆∞∆°ng ti·ªán kh√¥ng ƒë·∫£m b·∫£o an to√†n";
      case 4:
        return "Th·ªùi ti·∫øt";
      case 5:
        return "C∆° s·ªü h·∫° t·∫ßng giao th√¥ng";
      default:
        return "Kh√°c";
    }
  }
}
